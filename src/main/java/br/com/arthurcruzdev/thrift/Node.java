/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.arthurcruzdev.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-18")
public class Node implements org.apache.thrift.TBase<Node, Node._Fields>, java.io.Serializable, Cloneable, Comparable<Node> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Node");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FINGER_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fingerTable", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PREDECESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("predecessor", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeTupleSchemeFactory();

  public long id; // required
  public @org.apache.thrift.annotation.Nullable NodeInfo nodeInfo; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<NodeInfo> fingerTable; // required
  public @org.apache.thrift.annotation.Nullable NodeInfo predecessor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NODE_INFO((short)2, "nodeInfo"),
    FINGER_TABLE((short)3, "fingerTable"),
    PREDECESSOR((short)4, "predecessor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NODE_INFO
          return NODE_INFO;
        case 3: // FINGER_TABLE
          return FINGER_TABLE;
        case 4: // PREDECESSOR
          return PREDECESSOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.FINGER_TABLE, new org.apache.thrift.meta_data.FieldMetaData("fingerTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class))));
    tmpMap.put(_Fields.PREDECESSOR, new org.apache.thrift.meta_data.FieldMetaData("predecessor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Node.class, metaDataMap);
  }

  public Node() {
  }

  public Node(
    long id,
    NodeInfo nodeInfo,
    java.util.List<NodeInfo> fingerTable,
    NodeInfo predecessor)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nodeInfo = nodeInfo;
    this.fingerTable = fingerTable;
    this.predecessor = predecessor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Node(Node other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetNodeInfo()) {
      this.nodeInfo = new NodeInfo(other.nodeInfo);
    }
    if (other.isSetFingerTable()) {
      java.util.List<NodeInfo> __this__fingerTable = new java.util.ArrayList<NodeInfo>(other.fingerTable.size());
      for (NodeInfo other_element : other.fingerTable) {
        __this__fingerTable.add(new NodeInfo(other_element));
      }
      this.fingerTable = __this__fingerTable;
    }
    if (other.isSetPredecessor()) {
      this.predecessor = new NodeInfo(other.predecessor);
    }
  }

  @Override
  public Node deepCopy() {
    return new Node(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.nodeInfo = null;
    this.fingerTable = null;
    this.predecessor = null;
  }

  public long getId() {
    return this.id;
  }

  public Node setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public NodeInfo getNodeInfo() {
    return this.nodeInfo;
  }

  public Node setNodeInfo(@org.apache.thrift.annotation.Nullable NodeInfo nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  public void unsetNodeInfo() {
    this.nodeInfo = null;
  }

  /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInfo() {
    return this.nodeInfo != null;
  }

  public void setNodeInfoIsSet(boolean value) {
    if (!value) {
      this.nodeInfo = null;
    }
  }

  public int getFingerTableSize() {
    return (this.fingerTable == null) ? 0 : this.fingerTable.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<NodeInfo> getFingerTableIterator() {
    return (this.fingerTable == null) ? null : this.fingerTable.iterator();
  }

  public void addToFingerTable(NodeInfo elem) {
    if (this.fingerTable == null) {
      this.fingerTable = new java.util.ArrayList<NodeInfo>();
    }
    this.fingerTable.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<NodeInfo> getFingerTable() {
    return this.fingerTable;
  }

  public Node setFingerTable(@org.apache.thrift.annotation.Nullable java.util.List<NodeInfo> fingerTable) {
    this.fingerTable = fingerTable;
    return this;
  }

  public void unsetFingerTable() {
    this.fingerTable = null;
  }

  /** Returns true if field fingerTable is set (has been assigned a value) and false otherwise */
  public boolean isSetFingerTable() {
    return this.fingerTable != null;
  }

  public void setFingerTableIsSet(boolean value) {
    if (!value) {
      this.fingerTable = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public NodeInfo getPredecessor() {
    return this.predecessor;
  }

  public Node setPredecessor(@org.apache.thrift.annotation.Nullable NodeInfo predecessor) {
    this.predecessor = predecessor;
    return this;
  }

  public void unsetPredecessor() {
    this.predecessor = null;
  }

  /** Returns true if field predecessor is set (has been assigned a value) and false otherwise */
  public boolean isSetPredecessor() {
    return this.predecessor != null;
  }

  public void setPredecessorIsSet(boolean value) {
    if (!value) {
      this.predecessor = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NODE_INFO:
      if (value == null) {
        unsetNodeInfo();
      } else {
        setNodeInfo((NodeInfo)value);
      }
      break;

    case FINGER_TABLE:
      if (value == null) {
        unsetFingerTable();
      } else {
        setFingerTable((java.util.List<NodeInfo>)value);
      }
      break;

    case PREDECESSOR:
      if (value == null) {
        unsetPredecessor();
      } else {
        setPredecessor((NodeInfo)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NODE_INFO:
      return getNodeInfo();

    case FINGER_TABLE:
      return getFingerTable();

    case PREDECESSOR:
      return getPredecessor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NODE_INFO:
      return isSetNodeInfo();
    case FINGER_TABLE:
      return isSetFingerTable();
    case PREDECESSOR:
      return isSetPredecessor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Node)
      return this.equals((Node)that);
    return false;
  }

  public boolean equals(Node that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nodeInfo = true && this.isSetNodeInfo();
    boolean that_present_nodeInfo = true && that.isSetNodeInfo();
    if (this_present_nodeInfo || that_present_nodeInfo) {
      if (!(this_present_nodeInfo && that_present_nodeInfo))
        return false;
      if (!this.nodeInfo.equals(that.nodeInfo))
        return false;
    }

    boolean this_present_fingerTable = true && this.isSetFingerTable();
    boolean that_present_fingerTable = true && that.isSetFingerTable();
    if (this_present_fingerTable || that_present_fingerTable) {
      if (!(this_present_fingerTable && that_present_fingerTable))
        return false;
      if (!this.fingerTable.equals(that.fingerTable))
        return false;
    }

    boolean this_present_predecessor = true && this.isSetPredecessor();
    boolean that_present_predecessor = true && that.isSetPredecessor();
    if (this_present_predecessor || that_present_predecessor) {
      if (!(this_present_predecessor && that_present_predecessor))
        return false;
      if (!this.predecessor.equals(that.predecessor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetNodeInfo()) ? 131071 : 524287);
    if (isSetNodeInfo())
      hashCode = hashCode * 8191 + nodeInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetFingerTable()) ? 131071 : 524287);
    if (isSetFingerTable())
      hashCode = hashCode * 8191 + fingerTable.hashCode();

    hashCode = hashCode * 8191 + ((isSetPredecessor()) ? 131071 : 524287);
    if (isSetPredecessor())
      hashCode = hashCode * 8191 + predecessor.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Node other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNodeInfo(), other.isSetNodeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFingerTable(), other.isSetFingerTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFingerTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingerTable, other.fingerTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPredecessor(), other.isSetPredecessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredecessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predecessor, other.predecessor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Node(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeInfo:");
    if (this.nodeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fingerTable:");
    if (this.fingerTable == null) {
      sb.append("null");
    } else {
      sb.append(this.fingerTable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predecessor:");
    if (this.predecessor == null) {
      sb.append("null");
    } else {
      sb.append(this.predecessor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (nodeInfo != null) {
      nodeInfo.validate();
    }
    if (predecessor != null) {
      predecessor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NodeStandardScheme getScheme() {
      return new NodeStandardScheme();
    }
  }

  private static class NodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Node> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Node struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInfo = new NodeInfo();
              struct.nodeInfo.read(iprot);
              struct.setNodeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINGER_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fingerTable = new java.util.ArrayList<NodeInfo>(_list0.size);
                @org.apache.thrift.annotation.Nullable NodeInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new NodeInfo();
                  _elem1.read(iprot);
                  struct.fingerTable.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFingerTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREDECESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predecessor = new NodeInfo();
              struct.predecessor.read(iprot);
              struct.setPredecessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Node struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.nodeInfo != null) {
        oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
        struct.nodeInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fingerTable != null) {
        oprot.writeFieldBegin(FINGER_TABLE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fingerTable.size()));
          for (NodeInfo _iter3 : struct.fingerTable)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.predecessor != null) {
        oprot.writeFieldBegin(PREDECESSOR_FIELD_DESC);
        struct.predecessor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NodeTupleScheme getScheme() {
      return new NodeTupleScheme();
    }
  }

  private static class NodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Node> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNodeInfo()) {
        optionals.set(1);
      }
      if (struct.isSetFingerTable()) {
        optionals.set(2);
      }
      if (struct.isSetPredecessor()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetNodeInfo()) {
        struct.nodeInfo.write(oprot);
      }
      if (struct.isSetFingerTable()) {
        {
          oprot.writeI32(struct.fingerTable.size());
          for (NodeInfo _iter4 : struct.fingerTable)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetPredecessor()) {
        struct.predecessor.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodeInfo = new NodeInfo();
        struct.nodeInfo.read(iprot);
        struct.setNodeInfoIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.fingerTable = new java.util.ArrayList<NodeInfo>(_list5.size);
          @org.apache.thrift.annotation.Nullable NodeInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new NodeInfo();
            _elem6.read(iprot);
            struct.fingerTable.add(_elem6);
          }
        }
        struct.setFingerTableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.predecessor = new NodeInfo();
        struct.predecessor.read(iprot);
        struct.setPredecessorIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

